/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type { BreedListResponseOutput, GetAllBreedsParams } from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Listar todas as ra√ßas
 */
export const getAllBreeds = (
	params?: GetAllBreedsParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<BreedListResponseOutput>(
		{ url: `/breeds`, method: "GET", params },
		options,
	);
};

export const getGetAllBreedsQueryKey = (params?: GetAllBreedsParams) => {
	return [`/breeds`, ...(params ? [params] : [])] as const;
};

export const getGetAllBreedsQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllBreeds>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllBreedsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAllBreeds>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAllBreedsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllBreeds>>> = () =>
		getAllBreeds(params, requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllBreeds>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllBreedsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAllBreeds>>
>;
export type GetAllBreedsQueryError = ErrorType<unknown>;

export function useGetAllBreeds<
	TData = Awaited<ReturnType<typeof getAllBreeds>>,
	TError = ErrorType<unknown>,
>(
	params: undefined | GetAllBreedsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAllBreeds>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllBreeds>>,
					TError,
					Awaited<ReturnType<typeof getAllBreeds>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllBreeds<
	TData = Awaited<ReturnType<typeof getAllBreeds>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllBreedsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAllBreeds>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllBreeds>>,
					TError,
					Awaited<ReturnType<typeof getAllBreeds>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllBreeds<
	TData = Awaited<ReturnType<typeof getAllBreeds>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllBreedsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAllBreeds>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar todas as ra√ßas
 */

export function useGetAllBreeds<
	TData = Awaited<ReturnType<typeof getAllBreeds>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllBreedsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAllBreeds>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAllBreedsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
