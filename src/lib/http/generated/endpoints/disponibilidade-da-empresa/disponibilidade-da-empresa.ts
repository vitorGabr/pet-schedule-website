/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type { CompanyAvailabilityListResponseDtoOutput } from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Listar disponibilidade da empresa
 */
export const listCompanyAvailability = (
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<CompanyAvailabilityListResponseDtoOutput>(
		{ url: `/availabilities/company/${companyId}`, method: "GET" },
		options,
	);
};

export const getListCompanyAvailabilityQueryKey = (companyId?: string) => {
	return [`/availabilities/company/${companyId}`] as const;
};

export const getListCompanyAvailabilityQueryOptions = <
	TData = Awaited<ReturnType<typeof listCompanyAvailability>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyAvailability>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListCompanyAvailabilityQueryKey(companyId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listCompanyAvailability>>
	> = () => listCompanyAvailability(companyId, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof listCompanyAvailability>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCompanyAvailabilityQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCompanyAvailability>>
>;
export type ListCompanyAvailabilityQueryError = ErrorType<unknown>;

export function useListCompanyAvailability<
	TData = Awaited<ReturnType<typeof listCompanyAvailability>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyAvailability>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCompanyAvailability>>,
					TError,
					Awaited<ReturnType<typeof listCompanyAvailability>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanyAvailability<
	TData = Awaited<ReturnType<typeof listCompanyAvailability>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyAvailability>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCompanyAvailability>>,
					TError,
					Awaited<ReturnType<typeof listCompanyAvailability>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanyAvailability<
	TData = Awaited<ReturnType<typeof listCompanyAvailability>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyAvailability>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar disponibilidade da empresa
 */

export function useListCompanyAvailability<
	TData = Awaited<ReturnType<typeof listCompanyAvailability>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyAvailability>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCompanyAvailabilityQueryOptions(
		companyId,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
