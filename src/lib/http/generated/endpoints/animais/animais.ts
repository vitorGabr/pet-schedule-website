/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	CreateAnimalRequestDto,
	CreateAnimalResponseDtoOutput,
	GetAnimalByIdResponseDtoOutput,
	ListAnimalFromUserResponseDtoOutput,
	ListAnimalsFromUserParams,
	UpdateAnimalRequestDto,
	UploadAnimalImageDto,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Cria um animal
 */
export const createAnimal = (
	createAnimalRequestDto: BodyType<CreateAnimalRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<CreateAnimalResponseDtoOutput>(
		{
			url: `/animals`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createAnimalRequestDto,
		},
		options,
	);
};

export const getCreateAnimalMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createAnimal>>,
		TError,
		{ data: BodyType<CreateAnimalRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createAnimal>>,
	TError,
	{ data: BodyType<CreateAnimalRequestDto> },
	TContext
> => {
	const mutationKey = ["createAnimal"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createAnimal>>,
		{ data: BodyType<CreateAnimalRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return createAnimal(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateAnimalMutationResult = NonNullable<
	Awaited<ReturnType<typeof createAnimal>>
>;
export type CreateAnimalMutationBody = BodyType<CreateAnimalRequestDto>;
export type CreateAnimalMutationError = ErrorType<unknown>;

/**
 * @summary Cria um animal
 */
export const useCreateAnimal = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createAnimal>>,
			TError,
			{ data: BodyType<CreateAnimalRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createAnimal>>,
	TError,
	{ data: BodyType<CreateAnimalRequestDto> },
	TContext
> => {
	const mutationOptions = getCreateAnimalMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Listar todos os animais do usu√°rio autenticado
 */
export const listAnimalsFromUser = (
	params?: ListAnimalsFromUserParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ListAnimalFromUserResponseDtoOutput>(
		{ url: `/animals/me`, method: "GET", params },
		options,
	);
};

export const getListAnimalsFromUserQueryKey = (
	params?: ListAnimalsFromUserParams,
) => {
	return [`/animals/me`, ...(params ? [params] : [])] as const;
};

export const getListAnimalsFromUserQueryOptions = <
	TData = Awaited<ReturnType<typeof listAnimalsFromUser>>,
	TError = ErrorType<unknown>,
>(
	params?: ListAnimalsFromUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAnimalsFromUser>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListAnimalsFromUserQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listAnimalsFromUser>>
	> = () => listAnimalsFromUser(params, requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listAnimalsFromUser>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAnimalsFromUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAnimalsFromUser>>
>;
export type ListAnimalsFromUserQueryError = ErrorType<unknown>;

export function useListAnimalsFromUser<
	TData = Awaited<ReturnType<typeof listAnimalsFromUser>>,
	TError = ErrorType<unknown>,
>(
	params: undefined | ListAnimalsFromUserParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAnimalsFromUser>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAnimalsFromUser>>,
					TError,
					Awaited<ReturnType<typeof listAnimalsFromUser>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAnimalsFromUser<
	TData = Awaited<ReturnType<typeof listAnimalsFromUser>>,
	TError = ErrorType<unknown>,
>(
	params?: ListAnimalsFromUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAnimalsFromUser>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAnimalsFromUser>>,
					TError,
					Awaited<ReturnType<typeof listAnimalsFromUser>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAnimalsFromUser<
	TData = Awaited<ReturnType<typeof listAnimalsFromUser>>,
	TError = ErrorType<unknown>,
>(
	params?: ListAnimalsFromUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAnimalsFromUser>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar todos os animais do usu√°rio autenticado
 */

export function useListAnimalsFromUser<
	TData = Awaited<ReturnType<typeof listAnimalsFromUser>>,
	TError = ErrorType<unknown>,
>(
	params?: ListAnimalsFromUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAnimalsFromUser>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAnimalsFromUserQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Buscar animal por ID
 */
export const getAnimalById = (
	id: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<GetAnimalByIdResponseDtoOutput>(
		{ url: `/animals/${id}`, method: "GET" },
		options,
	);
};

export const getGetAnimalByIdQueryKey = (id?: string) => {
	return [`/animals/${id}`] as const;
};

export const getGetAnimalByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getAnimalById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAnimalById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAnimalByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getAnimalById>>
	> = () => getAnimalById(id, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getAnimalById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAnimalByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAnimalById>>
>;
export type GetAnimalByIdQueryError = ErrorType<unknown>;

export function useGetAnimalById<
	TData = Awaited<ReturnType<typeof getAnimalById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAnimalById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAnimalById>>,
					TError,
					Awaited<ReturnType<typeof getAnimalById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAnimalById<
	TData = Awaited<ReturnType<typeof getAnimalById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAnimalById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAnimalById>>,
					TError,
					Awaited<ReturnType<typeof getAnimalById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAnimalById<
	TData = Awaited<ReturnType<typeof getAnimalById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAnimalById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar animal por ID
 */

export function useGetAnimalById<
	TData = Awaited<ReturnType<typeof getAnimalById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAnimalById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAnimalByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Atualizar um animal
 */
export const updateAnimal = (
	id: string,
	updateAnimalRequestDto: BodyType<UpdateAnimalRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{
			url: `/animals/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: updateAnimalRequestDto,
		},
		options,
	);
};

export const getUpdateAnimalMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateAnimal>>,
		TError,
		{ id: string; data: BodyType<UpdateAnimalRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateAnimal>>,
	TError,
	{ id: string; data: BodyType<UpdateAnimalRequestDto> },
	TContext
> => {
	const mutationKey = ["updateAnimal"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateAnimal>>,
		{ id: string; data: BodyType<UpdateAnimalRequestDto> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateAnimal(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateAnimalMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateAnimal>>
>;
export type UpdateAnimalMutationBody = BodyType<UpdateAnimalRequestDto>;
export type UpdateAnimalMutationError = ErrorType<unknown>;

/**
 * @summary Atualizar um animal
 */
export const useUpdateAnimal = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateAnimal>>,
			TError,
			{ id: string; data: BodyType<UpdateAnimalRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateAnimal>>,
	TError,
	{ id: string; data: BodyType<UpdateAnimalRequestDto> },
	TContext
> => {
	const mutationOptions = getUpdateAnimalMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Deletar um animal
 */
export const deleteAnimal = (
	id: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{ url: `/animals/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteAnimalMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteAnimal>>,
		TError,
		{ id: string },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteAnimal>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteAnimal"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteAnimal>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteAnimal(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteAnimalMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteAnimal>>
>;

export type DeleteAnimalMutationError = ErrorType<unknown>;

/**
 * @summary Deletar um animal
 */
export const useDeleteAnimal = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteAnimal>>,
			TError,
			{ id: string },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteAnimal>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteAnimalMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Adicionar um asset a um animal
 */
export const addAssetToAnimal = (
	id: string,
	uploadAnimalImageDto: BodyType<UploadAnimalImageDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	const formData = new FormData();
	formData.append(`file`, uploadAnimalImageDto.file);

	return customFetch<void>(
		{
			url: `/animals/${id}/asset`,
			method: "PATCH",
			headers: { "Content-Type": "multipart/form-data" },
			data: formData,
		},
		options,
	);
};

export const getAddAssetToAnimalMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof addAssetToAnimal>>,
		TError,
		{ id: string; data: BodyType<UploadAnimalImageDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof addAssetToAnimal>>,
	TError,
	{ id: string; data: BodyType<UploadAnimalImageDto> },
	TContext
> => {
	const mutationKey = ["addAssetToAnimal"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof addAssetToAnimal>>,
		{ id: string; data: BodyType<UploadAnimalImageDto> }
	> = (props) => {
		const { id, data } = props ?? {};

		return addAssetToAnimal(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type AddAssetToAnimalMutationResult = NonNullable<
	Awaited<ReturnType<typeof addAssetToAnimal>>
>;
export type AddAssetToAnimalMutationBody = BodyType<UploadAnimalImageDto>;
export type AddAssetToAnimalMutationError = ErrorType<unknown>;

/**
 * @summary Adicionar um asset a um animal
 */
export const useAddAssetToAnimal = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof addAssetToAnimal>>,
			TError,
			{ id: string; data: BodyType<UploadAnimalImageDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof addAssetToAnimal>>,
	TError,
	{ id: string; data: BodyType<UploadAnimalImageDto> },
	TContext
> => {
	const mutationOptions = getAddAssetToAnimalMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
