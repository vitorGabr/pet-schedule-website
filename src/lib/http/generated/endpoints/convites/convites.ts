/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	InviteEmployeeRequestDto,
	InviteEmployeeResponseDtoOutput,
	ValidateInviteResponseDtoOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Cria um usuário parcial e envia convite para funcionário se juntar à empresa
 * @summary Convidar funcionário para empresa
 */
export const inviteEmployee = (
	inviteEmployeeRequestDto: BodyType<InviteEmployeeRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<InviteEmployeeResponseDtoOutput>(
		{
			url: `/invites/employee`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: inviteEmployeeRequestDto,
		},
		options,
	);
};

export const getInviteEmployeeMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inviteEmployee>>,
		TError,
		{ data: BodyType<InviteEmployeeRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof inviteEmployee>>,
	TError,
	{ data: BodyType<InviteEmployeeRequestDto> },
	TContext
> => {
	const mutationKey = ["inviteEmployee"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof inviteEmployee>>,
		{ data: BodyType<InviteEmployeeRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return inviteEmployee(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type InviteEmployeeMutationResult = NonNullable<
	Awaited<ReturnType<typeof inviteEmployee>>
>;
export type InviteEmployeeMutationBody = BodyType<InviteEmployeeRequestDto>;
export type InviteEmployeeMutationError = ErrorType<unknown>;

/**
 * @summary Convidar funcionário para empresa
 */
export const useInviteEmployee = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof inviteEmployee>>,
			TError,
			{ data: BodyType<InviteEmployeeRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof inviteEmployee>>,
	TError,
	{ data: BodyType<InviteEmployeeRequestDto> },
	TContext
> => {
	const mutationOptions = getInviteEmployeeMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Verifica se um token de convite é válido, não expirou e não foi usado
 * @summary Validar token de convite
 */
export const validateInvite = (
	token: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ValidateInviteResponseDtoOutput>(
		{ url: `/invites/validate/${token}`, method: "GET" },
		options,
	);
};

export const getValidateInviteQueryKey = (token?: string) => {
	return [`/invites/validate/${token}`] as const;
};

export const getValidateInviteQueryOptions = <
	TData = Awaited<ReturnType<typeof validateInvite>>,
	TError = ErrorType<unknown>,
>(
	token: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof validateInvite>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getValidateInviteQueryKey(token);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof validateInvite>>
	> = () => validateInvite(token, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!token,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof validateInvite>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ValidateInviteQueryResult = NonNullable<
	Awaited<ReturnType<typeof validateInvite>>
>;
export type ValidateInviteQueryError = ErrorType<unknown>;

export function useValidateInvite<
	TData = Awaited<ReturnType<typeof validateInvite>>,
	TError = ErrorType<unknown>,
>(
	token: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof validateInvite>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof validateInvite>>,
					TError,
					Awaited<ReturnType<typeof validateInvite>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateInvite<
	TData = Awaited<ReturnType<typeof validateInvite>>,
	TError = ErrorType<unknown>,
>(
	token: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof validateInvite>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof validateInvite>>,
					TError,
					Awaited<ReturnType<typeof validateInvite>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateInvite<
	TData = Awaited<ReturnType<typeof validateInvite>>,
	TError = ErrorType<unknown>,
>(
	token: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof validateInvite>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Validar token de convite
 */

export function useValidateInvite<
	TData = Awaited<ReturnType<typeof validateInvite>>,
	TError = ErrorType<unknown>,
>(
	token: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof validateInvite>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getValidateInviteQueryOptions(token, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
