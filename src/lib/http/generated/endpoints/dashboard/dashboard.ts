/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	DashboardMetricsResponseOutput,
	GetDashboardMetricsParams,
	GetWeeklyPerformanceParams,
	WeeklyPerformanceResponseOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retorna as principais m√©tricas do dashboard: agendamentos hoje, faturamento mensal, clientes ativos e avalia√ß√£o m√©dia
 * @summary Obter m√©tricas do dashboard
 */
export const getDashboardMetrics = (
	companyId: string,
	params?: GetDashboardMetricsParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<DashboardMetricsResponseOutput>(
		{ url: `/dashboard/metrics/${companyId}`, method: "GET", params },
		options,
	);
};

export const getGetDashboardMetricsQueryKey = (
	companyId?: string,
	params?: GetDashboardMetricsParams,
) => {
	return [
		`/dashboard/metrics/${companyId}`,
		...(params ? [params] : []),
	] as const;
};

export const getGetDashboardMetricsQueryOptions = <
	TData = Awaited<ReturnType<typeof getDashboardMetrics>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetDashboardMetricsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardMetrics>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetDashboardMetricsQueryKey(companyId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDashboardMetrics>>
	> = () => getDashboardMetrics(companyId, params, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getDashboardMetrics>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardMetricsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDashboardMetrics>>
>;
export type GetDashboardMetricsQueryError = ErrorType<unknown>;

export function useGetDashboardMetrics<
	TData = Awaited<ReturnType<typeof getDashboardMetrics>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params: undefined | GetDashboardMetricsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardMetrics>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDashboardMetrics>>,
					TError,
					Awaited<ReturnType<typeof getDashboardMetrics>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardMetrics<
	TData = Awaited<ReturnType<typeof getDashboardMetrics>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetDashboardMetricsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardMetrics>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDashboardMetrics>>,
					TError,
					Awaited<ReturnType<typeof getDashboardMetrics>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardMetrics<
	TData = Awaited<ReturnType<typeof getDashboardMetrics>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetDashboardMetricsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardMetrics>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Obter m√©tricas do dashboard
 */

export function useGetDashboardMetrics<
	TData = Awaited<ReturnType<typeof getDashboardMetrics>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetDashboardMetricsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardMetrics>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetDashboardMetricsQueryOptions(
		companyId,
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retorna m√©tricas de performance da semana: agendamentos, taxa de convers√£o e satisfa√ß√£o
 * @summary Obter performance semanal
 */
export const getWeeklyPerformance = (
	companyId: string,
	params?: GetWeeklyPerformanceParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<WeeklyPerformanceResponseOutput>(
		{ url: `/dashboard/performance/${companyId}`, method: "GET", params },
		options,
	);
};

export const getGetWeeklyPerformanceQueryKey = (
	companyId?: string,
	params?: GetWeeklyPerformanceParams,
) => {
	return [
		`/dashboard/performance/${companyId}`,
		...(params ? [params] : []),
	] as const;
};

export const getGetWeeklyPerformanceQueryOptions = <
	TData = Awaited<ReturnType<typeof getWeeklyPerformance>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetWeeklyPerformanceParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWeeklyPerformance>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetWeeklyPerformanceQueryKey(companyId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getWeeklyPerformance>>
	> = () => getWeeklyPerformance(companyId, params, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getWeeklyPerformance>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWeeklyPerformanceQueryResult = NonNullable<
	Awaited<ReturnType<typeof getWeeklyPerformance>>
>;
export type GetWeeklyPerformanceQueryError = ErrorType<unknown>;

export function useGetWeeklyPerformance<
	TData = Awaited<ReturnType<typeof getWeeklyPerformance>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params: undefined | GetWeeklyPerformanceParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWeeklyPerformance>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getWeeklyPerformance>>,
					TError,
					Awaited<ReturnType<typeof getWeeklyPerformance>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyPerformance<
	TData = Awaited<ReturnType<typeof getWeeklyPerformance>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetWeeklyPerformanceParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWeeklyPerformance>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getWeeklyPerformance>>,
					TError,
					Awaited<ReturnType<typeof getWeeklyPerformance>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyPerformance<
	TData = Awaited<ReturnType<typeof getWeeklyPerformance>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetWeeklyPerformanceParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWeeklyPerformance>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Obter performance semanal
 */

export function useGetWeeklyPerformance<
	TData = Awaited<ReturnType<typeof getWeeklyPerformance>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: GetWeeklyPerformanceParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWeeklyPerformance>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetWeeklyPerformanceQueryOptions(
		companyId,
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
