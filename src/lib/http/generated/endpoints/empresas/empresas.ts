/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * API para gerenciar servi√ßos e informa√ß√µes de cuidados com animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	AddLogoResponseDtoClassOutput,
	CompanyByIdResponseDtoOutput,
	SearchCompaniesParams,
	SearchCompaniesResponseDtoOutput,
	UploadImageDto,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Buscar empresas por query e localiza√ß√£o
 */
export const searchCompanies = (
	params?: SearchCompaniesParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<SearchCompaniesResponseDtoOutput>(
		{ url: `/companies/search`, method: "GET", params },
		options,
	);
};

export const getSearchCompaniesQueryKey = (params?: SearchCompaniesParams) => {
	return [`/companies/search`, ...(params ? [params] : [])] as const;
};

export const getSearchCompaniesQueryOptions = <
	TData = Awaited<ReturnType<typeof searchCompanies>>,
	TError = ErrorType<unknown>,
>(
	params?: SearchCompaniesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchCompanies>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getSearchCompaniesQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof searchCompanies>>
	> = () => searchCompanies(params, requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof searchCompanies>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchCompaniesQueryResult = NonNullable<
	Awaited<ReturnType<typeof searchCompanies>>
>;
export type SearchCompaniesQueryError = ErrorType<unknown>;

export function useSearchCompanies<
	TData = Awaited<ReturnType<typeof searchCompanies>>,
	TError = ErrorType<unknown>,
>(
	params: undefined | SearchCompaniesParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchCompanies>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchCompanies>>,
					TError,
					Awaited<ReturnType<typeof searchCompanies>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchCompanies<
	TData = Awaited<ReturnType<typeof searchCompanies>>,
	TError = ErrorType<unknown>,
>(
	params?: SearchCompaniesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchCompanies>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof searchCompanies>>,
					TError,
					Awaited<ReturnType<typeof searchCompanies>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchCompanies<
	TData = Awaited<ReturnType<typeof searchCompanies>>,
	TError = ErrorType<unknown>,
>(
	params?: SearchCompaniesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchCompanies>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar empresas por query e localiza√ß√£o
 */

export function useSearchCompanies<
	TData = Awaited<ReturnType<typeof searchCompanies>>,
	TError = ErrorType<unknown>,
>(
	params?: SearchCompaniesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof searchCompanies>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getSearchCompaniesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Buscar empresa por ID
 */
export const getCompanyById = (
	id: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<CompanyByIdResponseDtoOutput>(
		{ url: `/companies/${id}`, method: "GET" },
		options,
	);
};

export const getGetCompanyByIdQueryKey = (id?: string) => {
	return [`/companies/${id}`] as const;
};

export const getGetCompanyByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getCompanyById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCompanyById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCompanyByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getCompanyById>>
	> = () => getCompanyById(id, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getCompanyById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompanyByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCompanyById>>
>;
export type GetCompanyByIdQueryError = ErrorType<unknown>;

export function useGetCompanyById<
	TData = Awaited<ReturnType<typeof getCompanyById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCompanyById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCompanyById>>,
					TError,
					Awaited<ReturnType<typeof getCompanyById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompanyById<
	TData = Awaited<ReturnType<typeof getCompanyById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCompanyById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCompanyById>>,
					TError,
					Awaited<ReturnType<typeof getCompanyById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompanyById<
	TData = Awaited<ReturnType<typeof getCompanyById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCompanyById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar empresa por ID
 */

export function useGetCompanyById<
	TData = Awaited<ReturnType<typeof getCompanyById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCompanyById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCompanyByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Adicionar logo √† empresa
 */
export const addLogoToCompany = (
	id: string,
	uploadImageDto: BodyType<UploadImageDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	const formData = new FormData();
	formData.append(`file`, uploadImageDto.file);

	return customFetch<AddLogoResponseDtoClassOutput>(
		{
			url: `/companies/${id}/logo`,
			method: "PATCH",
			headers: { "Content-Type": "multipart/form-data" },
			data: formData,
		},
		options,
	);
};

export const getAddLogoToCompanyMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof addLogoToCompany>>,
		TError,
		{ id: string; data: BodyType<UploadImageDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof addLogoToCompany>>,
	TError,
	{ id: string; data: BodyType<UploadImageDto> },
	TContext
> => {
	const mutationKey = ["addLogoToCompany"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof addLogoToCompany>>,
		{ id: string; data: BodyType<UploadImageDto> }
	> = (props) => {
		const { id, data } = props ?? {};

		return addLogoToCompany(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type AddLogoToCompanyMutationResult = NonNullable<
	Awaited<ReturnType<typeof addLogoToCompany>>
>;
export type AddLogoToCompanyMutationBody = BodyType<UploadImageDto>;
export type AddLogoToCompanyMutationError = ErrorType<unknown>;

/**
 * @summary Adicionar logo √† empresa
 */
export const useAddLogoToCompany = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof addLogoToCompany>>,
			TError,
			{ id: string; data: BodyType<UploadImageDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof addLogoToCompany>>,
	TError,
	{ id: string; data: BodyType<UploadImageDto> },
	TContext
> => {
	const mutationOptions = getAddLogoToCompanyMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
