/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type { CategoryResponseOutput } from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Listar todas as categorias
 */
export const listAllCategories = (
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<CategoryResponseOutput>(
		{ url: `/categories`, method: "GET" },
		options,
	);
};

export const getListAllCategoriesQueryKey = () => {
	return [`/categories`] as const;
};

export const getListAllCategoriesQueryOptions = <
	TData = Awaited<ReturnType<typeof listAllCategories>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof listAllCategories>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customFetch>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAllCategoriesQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listAllCategories>>
	> = () => listAllCategories(requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listAllCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAllCategoriesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAllCategories>>
>;
export type ListAllCategoriesQueryError = ErrorType<unknown>;

export function useListAllCategories<
	TData = Awaited<ReturnType<typeof listAllCategories>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAllCategories>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAllCategories>>,
					TError,
					Awaited<ReturnType<typeof listAllCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAllCategories<
	TData = Awaited<ReturnType<typeof listAllCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAllCategories>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAllCategories>>,
					TError,
					Awaited<ReturnType<typeof listAllCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAllCategories<
	TData = Awaited<ReturnType<typeof listAllCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAllCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar todas as categorias
 */

export function useListAllCategories<
	TData = Awaited<ReturnType<typeof listAllCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAllCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAllCategoriesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
