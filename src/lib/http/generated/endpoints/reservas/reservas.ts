/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * API para gerenciar servi√ßos e informa√ß√µes de cuidados com animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	CreateAppointmentRequestDto,
	ListAvailableDatesResponseDtoOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Lista as datas dispon√≠veis para um servi√ßo e empresa espec√≠ficos
 */
export const listAvailableDates = (
	companyId: string,
	serviceId: string,
	date: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ListAvailableDatesResponseDtoOutput>(
		{ url: `/booking/available-dates/${companyId}/${serviceId}/${date}`, method: "GET" },
		options,
	);
};

export const getListAvailableDatesQueryKey = (
	companyId?: string,
	serviceId?: string,
	date?: string,
) => {
	return [`/booking/available-dates/${companyId}/${serviceId}/${date}`] as const;
};

export const getListAvailableDatesQueryOptions = <
	TData = Awaited<ReturnType<typeof listAvailableDates>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	serviceId: string,
	date: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListAvailableDatesQueryKey(companyId, serviceId, date);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAvailableDates>>> = () =>
		listAvailableDates(companyId, serviceId, date, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!(companyId && serviceId && date),
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};
};

export type ListAvailableDatesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAvailableDates>>
>;
export type ListAvailableDatesQueryError = ErrorType<unknown>;

export function useListAvailableDates<
	TData = Awaited<ReturnType<typeof listAvailableDates>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	serviceId: string,
	date: string,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAvailableDates>>,
					TError,
					Awaited<ReturnType<typeof listAvailableDates>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListAvailableDates<
	TData = Awaited<ReturnType<typeof listAvailableDates>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	serviceId: string,
	date: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAvailableDates>>,
					TError,
					Awaited<ReturnType<typeof listAvailableDates>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListAvailableDates<
	TData = Awaited<ReturnType<typeof listAvailableDates>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	serviceId: string,
	date: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Lista as datas dispon√≠veis para um servi√ßo e empresa espec√≠ficos
 */

export function useListAvailableDates<
	TData = Awaited<ReturnType<typeof listAvailableDates>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	serviceId: string,
	date: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableDates>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getListAvailableDatesQueryOptions(companyId, serviceId, date, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Cria um agendamento, iniciando o processo de pagamento
 */
export const createAppointment = (
	createAppointmentRequestDto: BodyType<CreateAppointmentRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<null>(
		{
			url: `/booking/create`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createAppointmentRequestDto,
		},
		options,
	);
};

export const getCreateAppointmentMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createAppointment>>,
		TError,
		{ data: BodyType<CreateAppointmentRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createAppointment>>,
	TError,
	{ data: BodyType<CreateAppointmentRequestDto> },
	TContext
> => {
	const mutationKey = ["createAppointment"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createAppointment>>,
		{ data: BodyType<CreateAppointmentRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return createAppointment(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateAppointmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof createAppointment>>
>;
export type CreateAppointmentMutationBody = BodyType<CreateAppointmentRequestDto>;
export type CreateAppointmentMutationError = ErrorType<unknown>;

/**
 * @summary Cria um agendamento, iniciando o processo de pagamento
 */
export const useCreateAppointment = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createAppointment>>,
			TError,
			{ data: BodyType<CreateAppointmentRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createAppointment>>,
	TError,
	{ data: BodyType<CreateAppointmentRequestDto> },
	TContext
> => {
	const mutationOptions = getCreateAppointmentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
