/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	CreateServiceRequestDto,
	ServiceDetailsResponseOutput,
	ServiceResponseListOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Listar servi√ßos por empresa
 */
export const listServicesByCompany = (
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ServiceResponseListOutput>(
		{ url: `/services/company/${companyId}`, method: "GET" },
		options,
	);
};

export const getListServicesByCompanyQueryKey = (companyId?: string) => {
	return [`/services/company/${companyId}`] as const;
};

export const getListServicesByCompanyQueryOptions = <
	TData = Awaited<ReturnType<typeof listServicesByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listServicesByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListServicesByCompanyQueryKey(companyId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listServicesByCompany>>
	> = () => listServicesByCompany(companyId, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof listServicesByCompany>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServicesByCompanyQueryResult = NonNullable<
	Awaited<ReturnType<typeof listServicesByCompany>>
>;
export type ListServicesByCompanyQueryError = ErrorType<unknown>;

export function useListServicesByCompany<
	TData = Awaited<ReturnType<typeof listServicesByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listServicesByCompany>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listServicesByCompany>>,
					TError,
					Awaited<ReturnType<typeof listServicesByCompany>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesByCompany<
	TData = Awaited<ReturnType<typeof listServicesByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listServicesByCompany>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listServicesByCompany>>,
					TError,
					Awaited<ReturnType<typeof listServicesByCompany>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesByCompany<
	TData = Awaited<ReturnType<typeof listServicesByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listServicesByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar servi√ßos por empresa
 */

export function useListServicesByCompany<
	TData = Awaited<ReturnType<typeof listServicesByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listServicesByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListServicesByCompanyQueryOptions(companyId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Inativar servi√ßo da empresa
 */
export const deactivateService = (
	id: string,
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{ url: `/services/${id}/company/${companyId}/deactivate`, method: "PATCH" },
		options,
	);
};

export const getDeactivateServiceMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deactivateService>>,
		TError,
		{ id: string; companyId: string },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deactivateService>>,
	TError,
	{ id: string; companyId: string },
	TContext
> => {
	const mutationKey = ["deactivateService"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deactivateService>>,
		{ id: string; companyId: string }
	> = (props) => {
		const { id, companyId } = props ?? {};

		return deactivateService(id, companyId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeactivateServiceMutationResult = NonNullable<
	Awaited<ReturnType<typeof deactivateService>>
>;

export type DeactivateServiceMutationError = ErrorType<unknown>;

/**
 * @summary Inativar servi√ßo da empresa
 */
export const useDeactivateService = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deactivateService>>,
			TError,
			{ id: string; companyId: string },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deactivateService>>,
	TError,
	{ id: string; companyId: string },
	TContext
> => {
	const mutationOptions = getDeactivateServiceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Criar servi√ßo
 */
export const createService = (
	createServiceRequestDto: BodyType<CreateServiceRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{
			url: `/services`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createServiceRequestDto,
		},
		options,
	);
};

export const getCreateServiceMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createService>>,
		TError,
		{ data: BodyType<CreateServiceRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createService>>,
	TError,
	{ data: BodyType<CreateServiceRequestDto> },
	TContext
> => {
	const mutationKey = ["createService"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createService>>,
		{ data: BodyType<CreateServiceRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return createService(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateServiceMutationResult = NonNullable<
	Awaited<ReturnType<typeof createService>>
>;
export type CreateServiceMutationBody = BodyType<CreateServiceRequestDto>;
export type CreateServiceMutationError = ErrorType<unknown>;

/**
 * @summary Criar servi√ßo
 */
export const useCreateService = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createService>>,
			TError,
			{ data: BodyType<CreateServiceRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createService>>,
	TError,
	{ data: BodyType<CreateServiceRequestDto> },
	TContext
> => {
	const mutationOptions = getCreateServiceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Buscar servi√ßo por ID
 */
export const getServiceById = (
	id: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ServiceDetailsResponseOutput>(
		{ url: `/services/${id}`, method: "GET" },
		options,
	);
};

export const getGetServiceByIdQueryKey = (id?: string) => {
	return [`/services/${id}`] as const;
};

export const getGetServiceByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getServiceById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getServiceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetServiceByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getServiceById>>
	> = () => getServiceById(id, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getServiceById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServiceByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getServiceById>>
>;
export type GetServiceByIdQueryError = ErrorType<unknown>;

export function useGetServiceById<
	TData = Awaited<ReturnType<typeof getServiceById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getServiceById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getServiceById>>,
					TError,
					Awaited<ReturnType<typeof getServiceById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceById<
	TData = Awaited<ReturnType<typeof getServiceById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getServiceById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getServiceById>>,
					TError,
					Awaited<ReturnType<typeof getServiceById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceById<
	TData = Awaited<ReturnType<typeof getServiceById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getServiceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar servi√ßo por ID
 */

export function useGetServiceById<
	TData = Awaited<ReturnType<typeof getServiceById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getServiceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetServiceByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
