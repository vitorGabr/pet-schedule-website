/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	ListStaffByCompanyParams,
	ListStaffByCompanyResponseDtoOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Listar colaboradores por empresa
 */
export const listStaffByCompany = (
	companyId: string,
	params?: ListStaffByCompanyParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<ListStaffByCompanyResponseDtoOutput>(
		{ url: `/staffs/company/${companyId}`, method: "GET", params },
		options,
	);
};

export const getListStaffByCompanyQueryKey = (
	companyId?: string,
	params?: ListStaffByCompanyParams,
) => {
	return [`/staffs/company/${companyId}`, ...(params ? [params] : [])] as const;
};

export const getListStaffByCompanyQueryOptions = <
	TData = Awaited<ReturnType<typeof listStaffByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListStaffByCompanyParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listStaffByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListStaffByCompanyQueryKey(companyId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listStaffByCompany>>
	> = () => listStaffByCompany(companyId, params, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof listStaffByCompany>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListStaffByCompanyQueryResult = NonNullable<
	Awaited<ReturnType<typeof listStaffByCompany>>
>;
export type ListStaffByCompanyQueryError = ErrorType<unknown>;

export function useListStaffByCompany<
	TData = Awaited<ReturnType<typeof listStaffByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params: undefined | ListStaffByCompanyParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listStaffByCompany>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listStaffByCompany>>,
					TError,
					Awaited<ReturnType<typeof listStaffByCompany>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListStaffByCompany<
	TData = Awaited<ReturnType<typeof listStaffByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListStaffByCompanyParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listStaffByCompany>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listStaffByCompany>>,
					TError,
					Awaited<ReturnType<typeof listStaffByCompany>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListStaffByCompany<
	TData = Awaited<ReturnType<typeof listStaffByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListStaffByCompanyParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listStaffByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar colaboradores por empresa
 */

export function useListStaffByCompany<
	TData = Awaited<ReturnType<typeof listStaffByCompany>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListStaffByCompanyParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listStaffByCompany>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListStaffByCompanyQueryOptions(
		companyId,
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Soft delete colaborador
 */
export const deleteStaff = (
	id: string,
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{ url: `/staffs/${id}/company/${companyId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteStaffMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteStaff>>,
		TError,
		{ id: string; companyId: string },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteStaff>>,
	TError,
	{ id: string; companyId: string },
	TContext
> => {
	const mutationKey = ["deleteStaff"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteStaff>>,
		{ id: string; companyId: string }
	> = (props) => {
		const { id, companyId } = props ?? {};

		return deleteStaff(id, companyId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteStaffMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteStaff>>
>;

export type DeleteStaffMutationError = ErrorType<unknown>;

/**
 * @summary Soft delete colaborador
 */
export const useDeleteStaff = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteStaff>>,
			TError,
			{ id: string; companyId: string },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteStaff>>,
	TError,
	{ id: string; companyId: string },
	TContext
> => {
	const mutationOptions = getDeleteStaffMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
