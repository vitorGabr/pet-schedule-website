/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import type { ErrorType } from "../../../../client-fetch";
import { customFetch } from "../../../../client-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const clerkWebhookControllerHandle = (
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{ url: `/auth/clerk/webhook`, method: "POST" },
		options,
	);
};

export const getClerkWebhookControllerHandleMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof clerkWebhookControllerHandle>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof clerkWebhookControllerHandle>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["clerkWebhookControllerHandle"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof clerkWebhookControllerHandle>>,
		void
	> = () => {
		return clerkWebhookControllerHandle(requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ClerkWebhookControllerHandleMutationResult = NonNullable<
	Awaited<ReturnType<typeof clerkWebhookControllerHandle>>
>;

export type ClerkWebhookControllerHandleMutationError = ErrorType<unknown>;

export const useClerkWebhookControllerHandle = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof clerkWebhookControllerHandle>>,
			TError,
			void,
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof clerkWebhookControllerHandle>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions =
		getClerkWebhookControllerHandleMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
