/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	AcceptInviteRequestDto,
	AcceptInviteResponseDtoOutput,
	SessionResponseDtoOutput,
	SignInRequestDto,
	SignInResponseDtoOutput,
	SignUpRequestDto,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Login de usu√°rio
 */
export const signIn = (
	signInRequestDto: BodyType<SignInRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<SignInResponseDtoOutput>(
		{
			url: `/auth/sign-in`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: signInRequestDto,
		},
		options,
	);
};

export const getSignInMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof signIn>>,
		TError,
		{ data: BodyType<SignInRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof signIn>>,
	TError,
	{ data: BodyType<SignInRequestDto> },
	TContext
> => {
	const mutationKey = ["signIn"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof signIn>>,
		{ data: BodyType<SignInRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return signIn(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SignInMutationResult = NonNullable<
	Awaited<ReturnType<typeof signIn>>
>;
export type SignInMutationBody = BodyType<SignInRequestDto>;
export type SignInMutationError = ErrorType<unknown>;

/**
 * @summary Login de usu√°rio
 */
export const useSignIn = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof signIn>>,
			TError,
			{ data: BodyType<SignInRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof signIn>>,
	TError,
	{ data: BodyType<SignInRequestDto> },
	TContext
> => {
	const mutationOptions = getSignInMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Registro de usu√°rio
 */
export const signUp = (
	signUpRequestDto: BodyType<SignUpRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{
			url: `/auth/sign-up`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: signUpRequestDto,
		},
		options,
	);
};

export const getSignUpMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof signUp>>,
		TError,
		{ data: BodyType<SignUpRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof signUp>>,
	TError,
	{ data: BodyType<SignUpRequestDto> },
	TContext
> => {
	const mutationKey = ["signUp"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof signUp>>,
		{ data: BodyType<SignUpRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return signUp(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SignUpMutationResult = NonNullable<
	Awaited<ReturnType<typeof signUp>>
>;
export type SignUpMutationBody = BodyType<SignUpRequestDto>;
export type SignUpMutationError = ErrorType<unknown>;

/**
 * @summary Registro de usu√°rio
 */
export const useSignUp = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof signUp>>,
			TError,
			{ data: BodyType<SignUpRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof signUp>>,
	TError,
	{ data: BodyType<SignUpRequestDto> },
	TContext
> => {
	const mutationOptions = getSignUpMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Obter informa√ß√µes da sess√£o do usu√°rio
 */
export const getSession = (options?: SecondParameter<typeof customFetch>) => {
	return customFetch<SessionResponseDtoOutput>(
		{ url: `/auth/session`, method: "GET" },
		options,
	);
};

export const getGetSessionQueryKey = () => {
	return [`/auth/session`] as const;
};

export const getGetSessionQueryOptions = <
	TData = Awaited<ReturnType<typeof getSession>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
	>;
	request?: SecondParameter<typeof customFetch>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSessionQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSession>>> = () =>
		getSession(requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSession>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSessionQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSession>>
>;
export type GetSessionQueryError = ErrorType<unknown>;

export function useGetSession<
	TData = Awaited<ReturnType<typeof getSession>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSession>>,
					TError,
					Awaited<ReturnType<typeof getSession>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSession<
	TData = Awaited<ReturnType<typeof getSession>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSession>>,
					TError,
					Awaited<ReturnType<typeof getSession>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSession<
	TData = Awaited<ReturnType<typeof getSession>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Obter informa√ß√µes da sess√£o do usu√°rio
 */

export function useGetSession<
	TData = Awaited<ReturnType<typeof getSession>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetSessionQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Finaliza o cadastro do funcion√°rio convidado definindo uma nova senha
 * @summary Aceitar convite de funcion√°rio
 */
export const acceptInvite = (
	acceptInviteRequestDto: BodyType<AcceptInviteRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<AcceptInviteResponseDtoOutput>(
		{
			url: `/auth/accept-invite`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: acceptInviteRequestDto,
		},
		options,
	);
};

export const getAcceptInviteMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof acceptInvite>>,
		TError,
		{ data: BodyType<AcceptInviteRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof acceptInvite>>,
	TError,
	{ data: BodyType<AcceptInviteRequestDto> },
	TContext
> => {
	const mutationKey = ["acceptInvite"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof acceptInvite>>,
		{ data: BodyType<AcceptInviteRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return acceptInvite(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type AcceptInviteMutationResult = NonNullable<
	Awaited<ReturnType<typeof acceptInvite>>
>;
export type AcceptInviteMutationBody = BodyType<AcceptInviteRequestDto>;
export type AcceptInviteMutationError = ErrorType<unknown>;

/**
 * @summary Aceitar convite de funcion√°rio
 */
export const useAcceptInvite = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof acceptInvite>>,
			TError,
			{ data: BodyType<AcceptInviteRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof acceptInvite>>,
	TError,
	{ data: BodyType<AcceptInviteRequestDto> },
	TContext
> => {
	const mutationOptions = getAcceptInviteMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
