/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	CompanyRatingStatsResponseOutput,
	CreateRatingRequestDto,
	ListCompanyRatingsParams,
	RatingEligibilityResponseOutput,
	RatingListResponseOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Cria uma avalia√ß√£o para uma empresa
 */
export const createRating = (
	createRatingRequestDto: BodyType<CreateRatingRequestDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<void>(
		{
			url: `/ratings`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createRatingRequestDto,
		},
		options,
	);
};

export const getCreateRatingMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createRating>>,
		TError,
		{ data: BodyType<CreateRatingRequestDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createRating>>,
	TError,
	{ data: BodyType<CreateRatingRequestDto> },
	TContext
> => {
	const mutationKey = ["createRating"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createRating>>,
		{ data: BodyType<CreateRatingRequestDto> }
	> = (props) => {
		const { data } = props ?? {};

		return createRating(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateRatingMutationResult = NonNullable<
	Awaited<ReturnType<typeof createRating>>
>;
export type CreateRatingMutationBody = BodyType<CreateRatingRequestDto>;
export type CreateRatingMutationError = ErrorType<unknown>;

/**
 * @summary Cria uma avalia√ß√£o para uma empresa
 */
export const useCreateRating = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createRating>>,
			TError,
			{ data: BodyType<CreateRatingRequestDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createRating>>,
	TError,
	{ data: BodyType<CreateRatingRequestDto> },
	TContext
> => {
	const mutationOptions = getCreateRatingMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Listar avalia√ß√µes de uma empresa
 */
export const listCompanyRatings = (
	companyId: string,
	params?: ListCompanyRatingsParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<RatingListResponseOutput>(
		{ url: `/ratings/company/${companyId}`, method: "GET", params },
		options,
	);
};

export const getListCompanyRatingsQueryKey = (
	companyId?: string,
	params?: ListCompanyRatingsParams,
) => {
	return [
		`/ratings/company/${companyId}`,
		...(params ? [params] : []),
	] as const;
};

export const getListCompanyRatingsQueryOptions = <
	TData = Awaited<ReturnType<typeof listCompanyRatings>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListCompanyRatingsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyRatings>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getListCompanyRatingsQueryKey(companyId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listCompanyRatings>>
	> = () => listCompanyRatings(companyId, params, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof listCompanyRatings>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCompanyRatingsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCompanyRatings>>
>;
export type ListCompanyRatingsQueryError = ErrorType<unknown>;

export function useListCompanyRatings<
	TData = Awaited<ReturnType<typeof listCompanyRatings>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params: undefined | ListCompanyRatingsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyRatings>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCompanyRatings>>,
					TError,
					Awaited<ReturnType<typeof listCompanyRatings>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanyRatings<
	TData = Awaited<ReturnType<typeof listCompanyRatings>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListCompanyRatingsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyRatings>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCompanyRatings>>,
					TError,
					Awaited<ReturnType<typeof listCompanyRatings>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanyRatings<
	TData = Awaited<ReturnType<typeof listCompanyRatings>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListCompanyRatingsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyRatings>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar avalia√ß√µes de uma empresa
 */

export function useListCompanyRatings<
	TData = Awaited<ReturnType<typeof listCompanyRatings>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	params?: ListCompanyRatingsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listCompanyRatings>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCompanyRatingsQueryOptions(
		companyId,
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Obter estat√≠sticas das avalia√ß√µes de uma empresa
 */
export const getCompanyRatingStats = (
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<CompanyRatingStatsResponseOutput>(
		{ url: `/ratings/company/${companyId}/stats`, method: "GET" },
		options,
	);
};

export const getGetCompanyRatingStatsQueryKey = (companyId?: string) => {
	return [`/ratings/company/${companyId}/stats`] as const;
};

export const getGetCompanyRatingStatsQueryOptions = <
	TData = Awaited<ReturnType<typeof getCompanyRatingStats>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCompanyRatingStats>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetCompanyRatingStatsQueryKey(companyId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getCompanyRatingStats>>
	> = () => getCompanyRatingStats(companyId, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getCompanyRatingStats>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompanyRatingStatsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCompanyRatingStats>>
>;
export type GetCompanyRatingStatsQueryError = ErrorType<unknown>;

export function useGetCompanyRatingStats<
	TData = Awaited<ReturnType<typeof getCompanyRatingStats>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCompanyRatingStats>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCompanyRatingStats>>,
					TError,
					Awaited<ReturnType<typeof getCompanyRatingStats>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompanyRatingStats<
	TData = Awaited<ReturnType<typeof getCompanyRatingStats>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCompanyRatingStats>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCompanyRatingStats>>,
					TError,
					Awaited<ReturnType<typeof getCompanyRatingStats>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompanyRatingStats<
	TData = Awaited<ReturnType<typeof getCompanyRatingStats>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCompanyRatingStats>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Obter estat√≠sticas das avalia√ß√µes de uma empresa
 */

export function useGetCompanyRatingStats<
	TData = Awaited<ReturnType<typeof getCompanyRatingStats>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCompanyRatingStats>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCompanyRatingStatsQueryOptions(companyId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Verificar se um usu√°rio pode criar avalia√ß√£o para uma empresa
 */
export const checkRatingEligibility = (
	companyId: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<RatingEligibilityResponseOutput>(
		{ url: `/ratings/company/${companyId}/eligibility`, method: "GET" },
		options,
	);
};

export const getCheckRatingEligibilityQueryKey = (companyId?: string) => {
	return [`/ratings/company/${companyId}/eligibility`] as const;
};

export const getCheckRatingEligibilityQueryOptions = <
	TData = Awaited<ReturnType<typeof checkRatingEligibility>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof checkRatingEligibility>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCheckRatingEligibilityQueryKey(companyId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof checkRatingEligibility>>
	> = () => checkRatingEligibility(companyId, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!companyId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof checkRatingEligibility>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckRatingEligibilityQueryResult = NonNullable<
	Awaited<ReturnType<typeof checkRatingEligibility>>
>;
export type CheckRatingEligibilityQueryError = ErrorType<unknown>;

export function useCheckRatingEligibility<
	TData = Awaited<ReturnType<typeof checkRatingEligibility>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof checkRatingEligibility>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof checkRatingEligibility>>,
					TError,
					Awaited<ReturnType<typeof checkRatingEligibility>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckRatingEligibility<
	TData = Awaited<ReturnType<typeof checkRatingEligibility>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof checkRatingEligibility>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof checkRatingEligibility>>,
					TError,
					Awaited<ReturnType<typeof checkRatingEligibility>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckRatingEligibility<
	TData = Awaited<ReturnType<typeof checkRatingEligibility>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof checkRatingEligibility>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Verificar se um usu√°rio pode criar avalia√ß√£o para uma empresa
 */

export function useCheckRatingEligibility<
	TData = Awaited<ReturnType<typeof checkRatingEligibility>>,
	TError = ErrorType<unknown>,
>(
	companyId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof checkRatingEligibility>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getCheckRatingEligibilityQueryOptions(
		companyId,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
