/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * API de Cuidados com Animais
 * OpenAPI spec version: 1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../../../../client-fetch";

import { customFetch } from "../../../../client-fetch";
import type {
	AppointmentByIdResponseDtoOutput,
	AppointmentsByClientResponseDtoOutput,
	AppointmentsByCompanyResponseDtoOutput,
	GetAllAppointmentsParams,
	GetAllCompanyAppointmentsParams,
	UpdateAppointmentStatusDto,
	UpdateAppointmentStatusResponseDtoOutput,
} from "../../models";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Retorna todos os agendamentos da empresa
 */
export const getAllCompanyAppointments = (
	params?: GetAllCompanyAppointmentsParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<AppointmentsByCompanyResponseDtoOutput>(
		{ url: `/appointments/company`, method: "GET", params },
		options,
	);
};

export const getGetAllCompanyAppointmentsQueryKey = (
	params?: GetAllCompanyAppointmentsParams,
) => {
	return [`/appointments/company`, ...(params ? [params] : [])] as const;
};

export const getGetAllCompanyAppointmentsQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllCompanyAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllCompanyAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllCompanyAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetAllCompanyAppointmentsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getAllCompanyAppointments>>
	> = () => getAllCompanyAppointments(params, requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllCompanyAppointments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllCompanyAppointmentsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAllCompanyAppointments>>
>;
export type GetAllCompanyAppointmentsQueryError = ErrorType<unknown>;

export function useGetAllCompanyAppointments<
	TData = Awaited<ReturnType<typeof getAllCompanyAppointments>>,
	TError = ErrorType<unknown>,
>(
	params: undefined | GetAllCompanyAppointmentsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllCompanyAppointments>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllCompanyAppointments>>,
					TError,
					Awaited<ReturnType<typeof getAllCompanyAppointments>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCompanyAppointments<
	TData = Awaited<ReturnType<typeof getAllCompanyAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllCompanyAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllCompanyAppointments>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllCompanyAppointments>>,
					TError,
					Awaited<ReturnType<typeof getAllCompanyAppointments>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCompanyAppointments<
	TData = Awaited<ReturnType<typeof getAllCompanyAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllCompanyAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllCompanyAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retorna todos os agendamentos da empresa
 */

export function useGetAllCompanyAppointments<
	TData = Awaited<ReturnType<typeof getAllCompanyAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllCompanyAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllCompanyAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAllCompanyAppointmentsQueryOptions(
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Retorna todos os agendamentos do cliente
 */
export const getAllAppointments = (
	params?: GetAllAppointmentsParams,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<AppointmentsByClientResponseDtoOutput>(
		{ url: `/appointments/user`, method: "GET", params },
		options,
	);
};

export const getGetAllAppointmentsQueryKey = (
	params?: GetAllAppointmentsParams,
) => {
	return [`/appointments/user`, ...(params ? [params] : [])] as const;
};

export const getGetAllAppointmentsQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetAllAppointmentsQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getAllAppointments>>
	> = () => getAllAppointments(params, requestOptions);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllAppointments>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllAppointmentsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAllAppointments>>
>;
export type GetAllAppointmentsQueryError = ErrorType<unknown>;

export function useGetAllAppointments<
	TData = Awaited<ReturnType<typeof getAllAppointments>>,
	TError = ErrorType<unknown>,
>(
	params: undefined | GetAllAppointmentsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllAppointments>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllAppointments>>,
					TError,
					Awaited<ReturnType<typeof getAllAppointments>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAppointments<
	TData = Awaited<ReturnType<typeof getAllAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllAppointments>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAllAppointments>>,
					TError,
					Awaited<ReturnType<typeof getAllAppointments>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAppointments<
	TData = Awaited<ReturnType<typeof getAllAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retorna todos os agendamentos do cliente
 */

export function useGetAllAppointments<
	TData = Awaited<ReturnType<typeof getAllAppointments>>,
	TError = ErrorType<unknown>,
>(
	params?: GetAllAppointmentsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAllAppointments>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAllAppointmentsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Atualiza o status de um agendamento
 */
export const updateAppointmentStatus = (
	id: string,
	updateAppointmentStatusDto: BodyType<UpdateAppointmentStatusDto>,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<UpdateAppointmentStatusResponseDtoOutput>(
		{
			url: `/appointments/${id}/status`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: updateAppointmentStatusDto,
		},
		options,
	);
};

export const getUpdateAppointmentStatusMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateAppointmentStatus>>,
		TError,
		{ id: string; data: BodyType<UpdateAppointmentStatusDto> },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateAppointmentStatus>>,
	TError,
	{ id: string; data: BodyType<UpdateAppointmentStatusDto> },
	TContext
> => {
	const mutationKey = ["updateAppointmentStatus"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateAppointmentStatus>>,
		{ id: string; data: BodyType<UpdateAppointmentStatusDto> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateAppointmentStatus(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateAppointmentStatusMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateAppointmentStatus>>
>;
export type UpdateAppointmentStatusMutationBody =
	BodyType<UpdateAppointmentStatusDto>;
export type UpdateAppointmentStatusMutationError = ErrorType<unknown>;

/**
 * @summary Atualiza o status de um agendamento
 */
export const useUpdateAppointmentStatus = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateAppointmentStatus>>,
			TError,
			{ id: string; data: BodyType<UpdateAppointmentStatusDto> },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateAppointmentStatus>>,
	TError,
	{ id: string; data: BodyType<UpdateAppointmentStatusDto> },
	TContext
> => {
	const mutationOptions = getUpdateAppointmentStatusMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Retorna um agendamento pelo ID
 */
export const getAppointmentById = (
	id: string,
	options?: SecondParameter<typeof customFetch>,
) => {
	return customFetch<AppointmentByIdResponseDtoOutput>(
		{ url: `/appointments/${id}`, method: "GET" },
		options,
	);
};

export const getGetAppointmentByIdQueryKey = (id?: string) => {
	return [`/appointments/${id}`] as const;
};

export const getGetAppointmentByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getAppointmentById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAppointmentById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAppointmentByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getAppointmentById>>
	> = () => getAppointmentById(id, requestOptions);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getAppointmentById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAppointmentByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAppointmentById>>
>;
export type GetAppointmentByIdQueryError = ErrorType<unknown>;

export function useGetAppointmentById<
	TData = Awaited<ReturnType<typeof getAppointmentById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAppointmentById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppointmentById>>,
					TError,
					Awaited<ReturnType<typeof getAppointmentById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppointmentById<
	TData = Awaited<ReturnType<typeof getAppointmentById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAppointmentById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppointmentById>>,
					TError,
					Awaited<ReturnType<typeof getAppointmentById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppointmentById<
	TData = Awaited<ReturnType<typeof getAppointmentById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAppointmentById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retorna um agendamento pelo ID
 */

export function useGetAppointmentById<
	TData = Awaited<ReturnType<typeof getAppointmentById>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAppointmentById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAppointmentByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
